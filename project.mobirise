{
  "settings": {
    "name": "Online Audio Visualizer",
    "currentPage": "index.html",
    "theme": {
      "name": "mobirise4",
      "title": "Mobirise 4",
      "styling": {
        "primaryColor": "#149dcc",
        "secondaryColor": "#ff3366",
        "successColor": "#F7ED4A",
        "infoColor": "#82786E",
        "warningColor": "#879A9F",
        "dangerColor": "#B1A374",
        "mainFont": "Rubik",
        "display1Font": "Rubik",
        "display1Size": 4.25,
        "display2Font": "Rubik",
        "display2Size": 3,
        "display5Font": "Rubik",
        "display5Size": 1.5,
        "display7Font": "Rubik",
        "display7Size": 1,
        "display4Font": "Rubik",
        "display4Size": 1,
        "isRoundedButtons": true,
        "isAnimatedOnScroll": false,
        "isScrollToTopButton": false
      }
    },
    "path": "@PROJECT_PATH@",
    "versionFirst": "4.12.3",
    "siteFonts": [],
    "uniqCompNum": 2,
    "versionPublish": "4.12.3"
  },
  "pages": {
    "index.html": {
      "settings": {
        "main": true,
        "title": "Home",
        "meta_descr": "",
        "header_custom": "",
        "footer_custom": "",
        "html_before": ""
      },
      "components": [
        {
          "alias": false,
          "_styles": {
            "& when not (@fullScreen)": {
              "padding-top": "(@paddingTop * 15px)",
              "padding-bottom": "(@paddingBottom * 15px)"
            },
            "& when (@bg-type = 'color')": {
              "background-color": "@bg-value"
            },
            "& when (@bg-type = 'image')": {
              "background-image": "url(@bg-value)"
            },
            "H1": {
              "color": "#232323"
            }
          },
          "_name": "header6",
          "_customHTML": "<section class=\"header6\" group=\"Headers\" data-bg-video=\"{{bg.type == 'video' && bg.value.url}}\" mbr-class=\"{'mbr-fullscreen': fullScreen,\n                    'mbr-parallax-background': bg.parallax}\">\n\n    <mbr-parameters>\n    <!-- Block parameters controls (Blue \"Gear\" panel) -->\n        <input type=\"checkbox\" title=\"Full Screen\" name=\"fullScreen\" checked>\n        <input type=\"range\" inline title=\"Top\" name=\"paddingTop\" min=\"0\" max=\"8\" step=\"1\" value=\"6\" condition=\"fullScreen == false\">\n        <input type=\"range\" inline title=\"Bottom\" name=\"paddingBottom\" min=\"0\" max=\"8\" step=\"1\" value=\"6\" condition=\"fullScreen == false\">\n\n        <input type=\"checkbox\" title=\"Show Title\" name=\"showTitle\" checked>\n        <input type=\"checkbox\" title=\"Show Text\" name=\"showText\">\n        <input type=\"checkbox\" title=\"Show Buttons\" name=\"showButtons\" checked>\n        <input type=\"checkbox\" title=\"Show Arrow\" name=\"showArrow\" checked>\n\n        <fieldset type=\"background\" name=\"bg\" parallax>\n            <input type=\"image\" title=\"Background Image\" value parallax>\n            <input type=\"color\" title=\"Background Color\" value=\"#ffffff\" selected>\n            <input type=\"video\" title=\"Background Video\" value=\"https://www.youtube.com/watch?v=36YgDDJ7XSc\">\n        </fieldset>\n\n        <input type=\"checkbox\" title=\"Overlay\" name=\"overlay\" checked condition=\"bg.type !== 'color'\">\n        <input type=\"color\" title=\"Overlay Color\" name=\"overlayColor\" value=\"#232323\" condition=\"overlay && bg.type !== 'color'\">\n        <input type=\"range\" inline title=\"Opacity\" name=\"overlayOpacity\" min=\"0\" max=\"1\" step=\"0.1\" value=\"0.5\" condition=\"overlay && bg.type !== 'color'\">\n    <!-- End block parameters -->\n    </mbr-parameters>\n\n    <div class=\"mbr-overlay\" mbr-if=\"overlay && bg.type!== 'color'\" mbr-style=\"{'opacity': overlayOpacity, 'background-color': overlayColor}\">\n    </div>\n\n    <div class=\"container\">\n        <div class=\"row justify-content-md-center\">\n            <div class=\"mbr-white col-md-10\">\n                <h1 class=\"mbr-section-title align-center mbr-bold pb-3 mbr-fonts-style\" mbr-theme-style=\"display-1\" mbr-if=\"showTitle\">Online Audio Visualizer</h1>\n                <p class=\"mbr-text align-center pb-3 mbr-fonts-style\" mbr-theme-style=\"display-5\" mbr-if=\"showText\" data-app-selector=\".mbr-text, .mbr-section-btn\">\n                    Intro with background video and color overlay. Mobirise helps you cut down development time by providing you with a flexible website editor with a drag and drop interface.\n                </p>\n                <div class=\"mbr-section-btn align-center\" mbr-if=\"showButtons\" data-toolbar=\"-mbrBtnMove\" mbr-buttons mbr-theme-style=\"display-4\"><a class=\"btn btn-md btn-primary\" href=\"/onlineAudioVisualizer.code\" data-app-placeholder=\"Type Text\">Source Code</a></div>\n            </div>\n        </div>\n    </div>\n\n    <div mbr-if=\"showArrow\" class=\"mbr-arrow hidden-sm-down\" aria-hidden=\"true\">\n        <a href=\"#next\">\n            <i class=\"mbri-down mbr-iconfont\"></i>\n        </a>\n    </div>\n</section>",
          "_anchor": "header6-0",
          "_isUserblock": true,
          "_sourceTheme": "mobirise4",
          "_cid": "rXCGYzR8XN",
          "_protectedParams": [],
          "_global": false,
          "_once": false,
          "_params": {}
        },
        {
          "alias": "deltapi-code-editor",
          "_isSecondary": true,
          "_styles": {
            "padding-top": "(@paddingTop * 15px)",
            "padding-bottom": "(@paddingBottom * 15px)",
            "background-color": "@bgColor",
            ".mbr-section": {
              "text-align": "center",
              "color": "#fff"
            }
          },
          "_name": "custom-html",
          "_customHTML": "\n\n    \n        <meta name=\"description\" content=\"HTML5 Audio Spectrum Visualizer\">\n        <title>Audio Visualizer | JS Tec YT</title>\n        <style type=\"text/css\">\n            html, body {\n                margin: 0;\n                font-family: arial, \"Microsoft YaHei\";\n                background-color: #272822;\n                color: #FEFEFE;\n            }\n            #fileWrapper{\n                transition:all 0.5s ease;\n            }\n            #fileWrapper:hover{\n                opacity: 1!important;\n            }\n            #visualizer_wrapper{\n                text-align: center;\n            }\n            footer{\n                position: fixed;\n                bottom: 2px;\n                color:#aaa;\n            }\n        </style>\n    \n    \n        <div id=\"wrapper\">\n            <div id=\"fileWrapper\" class=\"file_wrapper\">\n                <div id=\"info\">\n                    Online Audio Visualizer\n                </div>\n                <label for=\"uploadedFile\">Drag and Drop a File or Select a File to Play:</label>\n                <input type=\"file\" id=\"uploadedFile\">\n            </div>\n            <div id=\"visualizer_wrapper\">\n                <canvas id=\"canvas\" width=\"1000\" height=\"500\"></canvas>\n            </div>\n        </div>\n        <footer>\n            <small>Check out my <a href=\"https://www.youtube.com/channel/UCKCPp4D4xix6_vhvi6ekw9g?sub_confirmation=1/\" target=\"_blank\">YouTube Channel!</a></small>\n        </footer>\n        <script type=\"text/javascript\">\n            window.onload = function() {\n                new Visualizer().ini();\n            };\n            var Visualizer = function() {\n                this.file = null, //the current file\n                this.fileName = null, //the current file name\n                this.audioContext = null,\n                this.source = null, //the audio source\n                this.info = document.getElementById('info').innerHTML, //this used to upgrade the UI information\n                this.infoUpdateId = null, //to sotore the setTimeout ID and clear the interval\n                this.animationId = null,\n                this.status = 0, //flag for sound is playing 1 or stopped 0\n                this.forceStop = false,\n                this.allCapsReachBottom = false\n            };\n            Visualizer.prototype = {\n                ini: function() {\n                    this._prepareAPI();\n                    this._addEventListner();\n                },\n                _prepareAPI: function() {\n                    //fix browser vender for AudioContext and requestAnimationFrame\n                    window.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext;\n                    window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n                    window.cancelAnimationFrame = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.msCancelAnimationFrame;\n                    try {\n                        this.audioContext = new AudioContext();\n                    } catch (e) {\n                        this._updateInfo('!Your browser does not support AudioContext', false);\n                        console.log(e);\n                    }\n                },\n                _addEventListner: function() {\n                    var that = this,\n                        audioInput = document.getElementById('uploadedFile'),\n                        dropContainer = document.getElementsByTagName(\"canvas\")[0];\n                    //listen the file upload\n                    audioInput.onchange = function() {\n                        if (that.audioContext===null) {return;};\n\n                        //the if statement fixes the file selction cancle, because the onchange will trigger even the file selection been canceled\n                        if (audioInput.files.length !== 0) {\n                            //only process the first file\n                            that.file = audioInput.files[0];\n                            that.fileName = that.file.name;\n                            if (that.status === 1) {\n                                //the sound is still playing but we upload another file, so set the forceStop flag to true\n                                that.forceStop = true;\n                            };\n                            document.getElementById('fileWrapper').style.opacity = 1;\n                            that._updateInfo('Uploading', true);\n                            //once the file is ready,start the visualizer\n                            that._start();\n                        };\n                    };\n                    //listen the drag & drop\n                    dropContainer.addEventListener(\"dragenter\", function() {\n                        document.getElementById('fileWrapper').style.opacity = 1;\n                        that._updateInfo('Drop it on the page', true);\n                    }, false);\n                    dropContainer.addEventListener(\"dragover\", function(e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n                        //set the drop mode\n                        e.dataTransfer.dropEffect = 'copy';\n                    }, false);\n                    dropContainer.addEventListener(\"dragleave\", function() {\n                        document.getElementById('fileWrapper').style.opacity = 0.2;\n                        that._updateInfo(that.info, false);\n                    }, false);\n                    dropContainer.addEventListener(\"drop\", function(e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n                        if (that.audioContext===null) {return;};\n                        document.getElementById('fileWrapper').style.opacity = 1;\n                        that._updateInfo('Uploading', true);\n                        //get the dropped file\n                        that.file = e.dataTransfer.files[0];\n                        if (that.status === 1) {\n                            document.getElementById('fileWrapper').style.opacity = 1;\n                            that.forceStop = true;\n                        };\n                        that.fileName = that.file.name;\n                        //once the file is ready,start the visualizer\n                        that._start();\n                    }, false);\n                },\n                _start: function() {\n                    //read and decode the file into audio array buffer\n                    var that = this,\n                        file = this.file,\n                        fr = new FileReader();\n                    fr.onload = function(e) {\n                        var fileResult = e.target.result;\n                        var audioContext = that.audioContext;\n                        if (audioContext === null) {\n                            return;\n                        };\n                        that._updateInfo('Loading...', true);\n                        audioContext.decodeAudioData(fileResult, function(buffer) {\n                            that._updateInfo('Ready', true);\n                            that._visualize(audioContext, buffer);\n                        }, function(e) {\n                            that._updateInfo('Unable to Decode File!', false);\n                            console.log(e);\n                        });\n                    };\n                    fr.onerror = function(e) {\n                        that._updateInfo('Unable to Read File!', false);\n                        console.log(e);\n                    };\n                    //assign the file to the reader\n                    this._updateInfo('Reading File...', true);\n                    fr.readAsArrayBuffer(file);\n                },\n                _visualize: function(audioContext, buffer) {\n                    var audioBufferSouceNode = audioContext.createBufferSource(),\n                        analyser = audioContext.createAnalyser(),\n                        that = this;\n                    //connect the source to the analyser\n                    audioBufferSouceNode.connect(analyser);\n                    //connect the analyser to the destination(the speaker), or we won't hear the sound\n                    analyser.connect(audioContext.destination);\n                    //then assign the buffer to the buffer source node\n                    audioBufferSouceNode.buffer = buffer;\n                    //play the source\n                    if (!audioBufferSouceNode.start) {\n                        audioBufferSouceNode.start = audioBufferSouceNode.noteOn //in old browsers use noteOn method\n                        audioBufferSouceNode.stop = audioBufferSouceNode.noteOff //in old browsers use noteOn method\n                    };\n                    //stop the previous sound if any\n                    if (this.animationId !== null) {\n                        cancelAnimationFrame(this.animationId);\n                    }\n                    if (this.source !== null) {\n                        this.source.stop(0);\n                    }\n                    audioBufferSouceNode.start(0);\n                    this.status = 1;\n                    this.source = audioBufferSouceNode;\n                    audioBufferSouceNode.onended = function() {\n                        that._audioEnd(that);\n                    };\n                    this._updateInfo('Playing ' + this.fileName, false);\n                    this.info = 'Playing ' + this.fileName;\n                    document.getElementById('fileWrapper').style.opacity = 0.2;\n                    this._drawSpectrum(analyser);\n                },\n                _drawSpectrum: function(analyser) {\n                    var that = this,\n                        canvas = document.getElementById('canvas'),\n                        cwidth = canvas.width,\n                        cheight = canvas.height - 2,\n                        meterWidth = 10, //width of the meters in the spectrum\n                        gap = 2, //gap between meters\n                        capHeight = 2,\n                        capStyle = '#fff',\n                        meterNum = 800 / (10 + 2), //count of the meters\n                        capYPositionArray = []; ////store the vertical position of hte caps for the preivous frame\n                    ctx = canvas.getContext('2d'),\n                    gradient = ctx.createLinearGradient(0, 0, 0, 300);\n                    gradient.addColorStop(1, '#0f0');\n                    gradient.addColorStop(0.3, '#ff0');\n                    gradient.addColorStop(0.6, '#f00');\n\t\t\t\t\tgradient.addColorStop(0, '#f0f');\n                    var drawMeter = function() {\n                        var array = new Uint8Array(analyser.frequencyBinCount);\n                        analyser.getByteFrequencyData(array);\n                        if (that.status === 0) {\n                            //fix when some sounds end the value still not back to zero\n                            for (var i = array.length - 1; i >= 0; i--) {\n                                array[i] = 0;\n                            };\n                            allCapsReachBottom = true;\n                            for (var i = capYPositionArray.length - 1; i >= 0; i--) {\n                                allCapsReachBottom = allCapsReachBottom && (capYPositionArray[i] === 0);\n                            };\n                            if (allCapsReachBottom) {\n                                cancelAnimationFrame(that.animationId); //since the sound is top and animation finished, stop the requestAnimation to prevent potential memory leak,THIS IS VERY IMPORTANT!\n                                return;\n                            };\n                        };\n                        var step = Math.round(array.length / meterNum); //sample limited data from the total array\n                        ctx.clearRect(0, 0, cwidth, cheight);\n                        for (var i = 0; i < meterNum; i++) {\n                            var value = array[i * step];\n                            if (capYPositionArray.length < Math.round(meterNum)) {\n                                capYPositionArray.push(value);\n                            };\n                            ctx.fillStyle = capStyle;\n                            //draw the cap, with transition effect\n                            if (value < capYPositionArray[i]) {\n                                ctx.fillRect(i * 12, cheight - (--capYPositionArray[i]), meterWidth, capHeight);\n                            } else {\n                                ctx.fillRect(i * 12, cheight - value, meterWidth, capHeight);\n                                capYPositionArray[i] = value;\n                            };\n                            ctx.fillStyle = gradient; //set the filllStyle to gradient for a better look\n                            ctx.fillRect(i * 12 /*meterWidth+gap*/ , cheight - value + capHeight, meterWidth, cheight); //the meter\n                        }\n                        that.animationId = requestAnimationFrame(drawMeter);\n                    }\n                    this.animationId = requestAnimationFrame(drawMeter);\n                },\n                _audioEnd: function(instance) {\n                    if (this.forceStop) {\n                        this.forceStop = false;\n                        this.status = 1;\n                        return;\n                    };\n                    this.status = 0;\n                    var text = '';\n                    document.getElementById('fileWrapper').style.opacity = 1;\n                    document.getElementById('info').innerHTML = text;\n                    instance.info = text;\n                    document.getElementById('uploadedFile').value = '...';\n                },\n                _updateInfo: function(text, processing) {\n                    var infoBar = document.getElementById('info'),\n                        dots = '...',\n                        i = 0,\n                        that = this;\n                    infoBar.innerHTML = text + dots.substring(0, i++);\n                    if (this.infoUpdateId !== null) {\n                        clearTimeout(this.infoUpdateId);\n                    };\n                    if (processing) {\n                        //animate dots at the end of the info text\n                        var animateDot = function() {\n                            if (i > 3) {\n                                i = 0\n                            };\n                            infoBar.innerHTML = text + dots.substring(0, i++);\n                            that.infoUpdateId = setTimeout(animateDot, 250);\n                        }\n                        this.infoUpdateId = setTimeout(animateDot, 250);\n                    };\n                }\n            }\n        </script>\n        <script>\n        </script>\n    \n",
          "_anchor": "custom-html-1",
          "_isUserblock": true,
          "_sourceTheme": "mobirise4",
          "_cid": "rXCH0A1yLC",
          "_protectedParams": [],
          "_global": false,
          "_once": false,
          "_params": {}
        }
      ]
    }
  }
}